How did viewing a diff between two versions of a file help you see the bug that was introduced?

The unix version was a bit confusing in its format.  There are a number of symbols, such as @@, that left the user wondering what was really changed.

The instructors notes of what is + vs. - was helpful

Finding typos was not intuitive.  A graphical DIFF tool would be better in terms of highlighting changes


How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

Saving working copies between changes allows you to revert back to a previous version should some unintended change result in a broken document or program.


GIT
UK slang for unpleasant person
written by Linux Torvalds in 2005

SVN 
Can NOT be used offline

Checkpoints should be user determined to be meaningful
These are called COMMITS in GIT

Concept Map
version control
	ease to create, store source code
	GIT
		Commit


GIT DIFF
use Git to see the differences between two commits
output is similar 
black lines didn't change
red lines were removed from 1st to 2nd version
green lines were added between version

Keep commits small-ish.  
	Too big and the diff is harder to understand. 
	Too small, then the history becomes too long.

Rule of Thumb
	one commit per logical change
	this gives the commit a purpose that can be easily identified

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

Pros
	allows for a logical commit point
	only commit when you're ready to commit vs. prematurely
Cons
	if you forget, and your system crashes, you've lost your work
	it can act as a safety net to ensure your work is saved

Commits with multiple files
Repository
	a commit is a snapshot of all related files in your repository even if some files haven't changed

	git log --stat
	shows the files changed in the commit
	plus signs and minus signs illustrate the relative size of the changes (add, removes) of your file



Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Google Docs is more likely geared toward single type written documentation which doesn't necessarily require changes to be tracked together across multiple docs
Whereas, GIT is used for software code version control where it is best to track interrelated files together


using version control allows the programmer to break a larger effort into smaller components
GIT has a steep learning curve, but is very powerful

to copy an entire repostory, you clone it

git clone <url>
e.g. 
git clone https://github.com/udacity/asteroids.git

git config --global color.ui auto
allows you to globally change all git projects

git log --stat
shows the commit ID and statistics and messages from the commit

git diff <commit id1> <commit id2>


How can you use the commands git log and git diff to view the history of files?
I can see the commit message used, the lines added vs. deleted from the file during the commit, date, time, etc.
the diff lets me see the actual content of the changes
helpful to see what may have "broken" or what may have been "fixed" from one commit to the next


repository
	collection of files
	there could be several repositories that store your files

Clone takes an existing repository and makes a copy of it
log shows the commits in the repository prior to the next commit




Git Errors and Warnings Solution

Should not be doing an octopus
Octopus is a strategy Git uses to combine many different versions of code together. This message can appear if you try to use this strategy in an inappropriate situation.

You are in 'detached HEAD' state
HEAD is what Git calls the commit you are currently on. You can “detach” the HEAD by switching to a previous commit, which we’ll see in the next video. Despite what it sounds like, it’s actually not a bad thing to detach the HEAD. Git just warns you so that you’ll realize you’re doing it.

Panic! (the 'impossible' happened)
This is a real error message, but it’s not output by Git. Instead it’s output by GHC, the compiler for a programming language called Haskell. It’s reserved for particularly surprising errors!

Takeaway

We hope these errors and warnings amused you as much as they amused us! Now that you know what kind of errors Git can throw, you’re ready to start checking out previous versions of files with Caroline.



commit checkout
view the different between any two commits
but can temporarily restory a previous version 
this is a commit checkout (NOT the same thing as an SVN checkout)

git checkout b0678b161fcf74467ed3a63110557e3d6229cfa6
gives the detached HEAD state message


How might using version control make you more confident to make changes that could break something?

knowing that I have multiple version saved, and the detailed changes made between versions, I can easily go back to previous versions and backtrack any mistakes I may have made


CLI modifications to change your workspace
colors, name, commit ID, short cuts, set your commit message editor, etc.

process for mac / linux
two new files, one for git completion in prompt and the other for tab completion

Make sure you can start your editor from the terminal

If you use Sublime, you can do this by add the following line to your .bash_profile (you may need to change the path if Sublime is installed in a different location for you):

alias subl="/Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl"


Making Git configurations

Run the following Git configuration commands. The first one will need to be modified if you are using a text editor other than Sublime, or if Sublime is installed in another location for you. See this page for the correct command for a couple of other popular text editors. For any other editor, you'll need to enter the command you use to launch that editor from the terminal.

git config --global core.editor "'/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl' -n -w"
git config --global push.default upstream
git config --global merge.conflictstyle diff3

(Instead of the first command, you may be able to use the simpler git config --global core.editor "subl -n -w" as shown in the video, but many students have found this does not work for them.)
Restart the terminal

You'll need to close and re-open the terminal before all your changes take effect.

OR, you can enter     source ~/.bash_profile


Once i've set the alias for subl, I can use the following instead of above
git config --global core.editor "subl -n -w"


Now that you have your workspace set up, what do you want to try using Git for?
I'd like to see checkouts and diffs


















